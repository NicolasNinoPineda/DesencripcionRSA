/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ProyectoRSA;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;

public class App {

    public static void main(String[] args) throws Exception {
         // Generar un par de claves RSA (clave pública y clave privada)
        KeyPair keyPair = generateRSAKeyPair();

        // Nombre de los archivos
        String archivoOriginal = "../app/src/main/java/ProyectoRSA/mensaje.txt";
        String archivoEncriptado = "../app/src/main/java/ProyectoRSA/mensaje_encriptado.txt";
        String archivoDesencriptado = "../app/src/main/java/ProyectoRSA/mensaje_desencriptado.txt";
        String archivoFirma = "../app/src/main/java/ProyectoRSA/firma.txt";

        // Encriptar el archivo con la clave pública
        encryptFile(archivoOriginal, archivoEncriptado, keyPair.getPublic());

        // Desencriptar el archivo con la clave privada
        decryptFile(archivoEncriptado, archivoDesencriptado, keyPair.getPrivate());

        // Firmar el archivo con la clave privada
        signFile(archivoOriginal, archivoFirma, keyPair.getPrivate());

        // Validar la firma con la clave pública
        boolean esValido = verifyFile(archivoOriginal, archivoFirma, keyPair.getPublic());

        // Mostrar el contenido de los archivos
        displayFileContent("Mensaje Original", archivoOriginal);
        displayFileContent("Mensaje Encriptado", archivoEncriptado);
        displayFileContent("Mensaje Desencriptado", archivoDesencriptado);
        displayFileContent("Firma", archivoFirma);
        System.out.println("La firma es valida: " + esValido);
    }
    
    
// Generar un par de claves RSA
    public static KeyPair generateRSAKeyPair() throws Exception {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        return keyPairGenerator.generateKeyPair();
    }

    // Encriptar un archivo con la clave pública
    public static void encryptFile(String inputFile, String outputFile, PublicKey publicKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);

        try (FileInputStream fis = new FileInputStream(inputFile);
             FileOutputStream fos = new FileOutputStream(outputFile);
             CipherOutputStream cos = new CipherOutputStream(fos, cipher)) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                cos.write(buffer, 0, bytesRead);
            }
        }
    }

    // Desencriptar un archivo con la clave privada
    public static void decryptFile(String inputFile, String outputFile, PrivateKey privateKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);

        try (FileInputStream fis = new FileInputStream(inputFile);
             CipherInputStream cis = new CipherInputStream(fis, cipher);
             FileOutputStream fos = new FileOutputStream(outputFile)) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = cis.read(buffer)) != -1) {
                fos.write(buffer, 0, bytesRead);
            }
        }
    }

    // Firmar un archivo con la clave privada
    public static void signFile(String inputFile, String outputFile, PrivateKey privateKey) throws Exception {
        Signature firma = Signature.getInstance("SHA256withRSA");
        firma.initSign(privateKey);

        try (FileInputStream fis = new FileInputStream(inputFile);
             FileOutputStream fos = new FileOutputStream(outputFile)) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                firma.update(buffer, 0, bytesRead);
            }
            byte[] firmaBytes = firma.sign();
            fos.write(firmaBytes);
        }
    }

    // Validar la firma de un archivo con la clave pública
    public static boolean verifyFile(String inputFile, String firmaFile, PublicKey publicKey) throws Exception {
        Signature firmaVerificadora = Signature.getInstance("SHA256withRSA");
        firmaVerificadora.initVerify(publicKey);

        try (FileInputStream fis = new FileInputStream(inputFile);
             FileInputStream fisFirma = new FileInputStream(firmaFile)) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                firmaVerificadora.update(buffer, 0, bytesRead);
            }

            byte[] firmaBytes = new byte[(int) new File(firmaFile).length()];
            fisFirma.read(firmaBytes);

            return firmaVerificadora.verify(firmaBytes);
        }
    }
    
    // Mostrar el contenido de un archivo en pantalla
    public static void displayFileContent(String titulo, String archivo) throws Exception {
        System.out.println("===== " + titulo + " =====");
        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                System.out.println(linea);
            }
        }
        System.out.println("====================");
    }
}